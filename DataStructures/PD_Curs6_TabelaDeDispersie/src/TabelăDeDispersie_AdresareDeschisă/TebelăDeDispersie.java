package Tabel캒DeDispersie_AdresareDeschis캒;
/* Prealabil:
 * 	FUNC탴IA DE DISPERSIE este: d(c) = (c%m).
 * 		Aceasta va returna o valoare 칥n intervalul 0,m-1.
 * 		Elementele func탵iei sunt c = elementulDeA캠캒ugat 탳i m = capacitateaTabelei (vectoruluiDinamic).
 *	
 *	Tabela de dispersi o folosim la continere unde NU avem pozi탵ii (toate 칥n afar캒 de List캒).
 * 
 * 	Coliziunea reprezint캒 situa탵ia 칥n care 2 elemente diferite ar trebui puse pe aceea탳i pozi탵ie.
 * 		Rezolvarea coliziunilor (x2 metode):
 * 			a. Prin liste independente;
 * 			b. Prin adresare deschis캒.
 * 
 * 
 * 	Factorul de 칥nc캒rcare (Load factor) 洧뤍 = n/m.
 * 		Mai exact: num캒rulDeElemente / Capacitate (sau num캒rul de pozi탵ii).
 * 	Indiferent de modul 칥n care trat캒m coliziunea, avem nevoie s캒 탳tim c칙t de plin e vectorul dinamic
 * al tabelei de dispersie.
 * 	
 * 		칉n cazul rezolv캒rii cu adresare deschis캒 洧뤍 (i.e. factorul de 칥nc캒rcare),
 * poate fi maxim 1, mai exact atunci c칙nd numarulDeElemente (n) este egal cu
 * num캒rul de pozi탵ii (m sau capacitatea vectoruluiDinamic).
 * 		Acest maxim reise din modul 칥n care a탳ez캒m elementele tabelei de dispersie,
 * care 칥n cazul adres캒rii deschise vor fi puse chiar 칥n vectorul dinamic, iar NU
 * 칥n afara sa (NU 칥ntr-o list캒 independent캒).
 */


//a. Prin liste independente (simplu 칥nl캒n탵uite).
public class Tebel캒DeDispersie {
	//Reprezentare. | x3, inclusiv func탵ia de dispersie.

	int capacitate;			//C칙te elemente vom putea p캒stra 칥n tabela de dispersie (care e un VD).
	int[] elemente;
	//func탵iaDeDispersie, care e pu탵in diferit캒, mai exact va fi ((elementDeAd캒ugat%capacitate)+num캒rulDe칉ncercare+2*num캒rulDe칥ncercare^2)%capacitate.
	//Op탵ional putem avea 탳i num캒rElemente (length);

	
	//Constructor
	public Tebel캒DeDispersie() {
		creeaz캒();
	}
	
	public void creeaz캒() {
		this.capacitate = 11;
		this.elemente = new int[this.capacitate];
		//Op탵ional this.num캒rElemente = 0;
	}

	public int func탵iaDeDispersie(int elementDeAd캒ugat, int num캒rulDe칉ncercare) {
		return (int) ((elementDeAd캒ugat%this.capacitate)+num캒rulDe칉ncercare+2*(Math.pow(num캒rulDe칉ncercare, 2))%this.capacitate);
	}

	public void ad캒ugare(int elementDeAd캒ugat) {	//Complexitate: caz favorabil 풪(1), caz defavorabil 풪(n) 탳i caz mediu 풪(1). 
		int i, pozi탵ie;								//i reprezint캒Num캒rulDe칉ncercare.
		i = 0;
		pozi탵ie = this.func탵iaDeDispersie(elementDeAd캒ugat, i);

		while(i<this.capacitate && this.elemente[pozi탵ie] != 0) {
			i++;			//Cre탳tem num캒rul de 칥ncercare.
			pozi탵ie = this.func탵iaDeDispersie(elementDeAd캒ugat, i);			//Recalcul캒m pozi탵ia cu noul num캒r de 칥ncercare.
		}
		/*Verific캒m s캒 nu fi 칥ncercat deja toate pozi탵iile 탳i dac캒 pozi탵ia nu e goal캒.
		 * 	칉n Java, deoarece variabilele care con탵in date primitive vor fi 칥ntotdeauna ini탵ializate
		 * cu ceva valoarea, e.g. la int vor avea valoarea implicit캒 0, NU vom putea testa condi탵ia
		 * ca pozi탵ia s캒 fie gol캒 cu null (NU exist캒 null pentru date primitive), ci vom presupune c캒
		 * o pozi탵ie este goal캒 atunci c칙nd aceasta are valoare 0, pe care Java o pune 칥n mod implicit.
		 */
		
		//Verific캒m dac캒 pozi탵ia la ie탳irea din while avem toate pozi탵iile ocupate.
		if(this.elemente[pozi탵ie] > 0) {												//Dac캒 e mai mare ca 0, respectiv ca valoarea implicit캒 Java, 칥nsemn캒 c캒 pozi탵ia este ocupat캒.
			this.m캒re탳teCapacitatea탲iAdaug캒(elementDeAd캒ugat);							//Trebuie s캒 mut캒m toate elementele din vectorul vechi 칥n vectorul nou, respect칙nd func탵ia de dispersie. Apel캒m subAlgoritmul care face acest lucru.
		}else {																		
			//Altfel dac캒 nu am ajuns la capacitate, deoarece mai am pozi탵ii libere.
			this.elemente[pozi탵ie] = elementDeAd캒ugat;
		}

	}
	
	//resizeAndAdd.
	public void m캒re탳teCapacitatea탲iAdaug캒(int elementDeAd캒ugat) {
		this.capacitate = capacitate*2;
		int[] vectorNou = new int[capacitate];
		int num캒rulDe칉ncercare, pozi탵ie;									//칉n pseudocod num캒rulDe칉ncercare apare ca index.
																				//Este 칥n regul캒 s캒 fie a탳a, deoarece num캒rul de 칥ncercare va fi indexul noului vector.
		
		//1. subAlgoritm de m캒rire a capacit캒탵ii 탳i de mutare a elementelor.
		//Parcuregm vectorul vechi 탳i ad캒ug캒m fiecare element.
		for(int i = 0; i<this.capacitate/2; i++) {							//!N.B: mergem p칙n캒 la this.capacitate/2, deoarece aceasta este vecha capacitate ce a fost atins캒.
			if(this.elemente[i] > 0) {										//Dac캒 avem element pe acea pozi탵ie 칥n vechiul vector.
				num캒rulDe칉ncercare = 0;
				pozi탵ie = this.func탵iaDeDispersie(this.elemente[i], num캒rulDe칉ncercare);			//Trecem elemenutul prin func탵ia de dispersie pentru a-i afla pozi탵ia din noul vector.
				
				//Verific캒m s캒 nu fi ajuns la noua capacitate 탳i s캒 am pozi탵ie liber캒 칥n noul vector creat.
				while(num캒rulDe칉ncercare<this.capacitate && vectorNou[num캒rulDe칉ncercare] > 0) {	//!N.B: this.capacitate este acum capacitate*2. Prin urmare valoarea din func탵ia de dispersie va fi alta.
					num캒rulDe칉ncercare++;
					pozi탵ie = this.func탵iaDeDispersie(elementDeAd캒ugat, num캒rulDe칉ncercare);
				}
				vectorNou[pozi탵ie] = this.elemente[i];				//Copiem propriu-zis valoarea elementelor vechiului vector, 칥n pozi탵iile corecte ale noului vector.
			}
		}
		this.elemente = vectorNou;			//Schimb캒m referin탵a 탳i astfel elemente va deveni vector nou.
		
		
		//2. subAlgoritm de ad캒ugare a noului element ce ar fi dep캒탳it vechia capacitate. 
		//Deoarece am finalizat m캒rirea capacit캒탵ii 탳i mutarea vechiilor element, respect칙nd d(c,i), putem ad캒uga 탳i elementul nou care ar fi dep캒탳it vechea capacitate.
		num캒rulDe칉ncercare = 0;
		pozi탵ie = this.func탵iaDeDispersie(elementDeAd캒ugat, num캒rulDe칉ncercare);

		//C캒ut캒m o pozi탵ie goal캒.
		while(num캒rulDe칉ncercare<this.capacitate && vectorNou[num캒rulDe칉ncercare] > 0) {			//Putem folosi vectorNou, deoarece this.elemente refer캒 la acesa 탳i orice schimbare se vede 탳i pentru this.elemente.
			num캒rulDe칉ncercare++;
			pozi탵ie = this.func탵iaDeDispersie(elementDeAd캒ugat, num캒rulDe칉ncercare);
		}
		//Dup캒 ce ie탳im din while ar trebui s캒 g캒sim o pozi탵ie goal캒, deoarece capacitatea a fost anterior dublat캒.
		//Putem ad캒uga elementul 칥n tabela de dispersie.
		vectorNou[pozi탵ie] = elementDeAd캒ugat;
	}






}
