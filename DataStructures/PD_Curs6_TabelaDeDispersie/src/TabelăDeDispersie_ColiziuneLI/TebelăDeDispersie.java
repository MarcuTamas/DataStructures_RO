package Tabel캒DeDispersie_ColiziuneLI;
/* Prealabil:
 * 	FUNC탴IA DE DISPERSIE este: d(c) = (c%m).
 * 		Aceasta va returna o valoare 칥n intervalul 0,m-1.
 * 		Elementele func탵iei sunt c = elementulDeA캠캒ugat 탳i m = capacitateaTabelei (vectoruluiDinamic).
 *	
 *	Tabela de dispersi o folosim la continere unde NU avem pozi탵ii (toate 칥n afar캒 de List캒).
 * 
 * 	Coliziunea reprezint캒 situa탵ia 칥n care 2 elemente diferite ar trebui puse pe aceea탳i pozi탵ie.
 * 		Rezolvarea coliziunilor (x2 metode):
 * 			a. Prin liste independente;
 * 			b. Prin adresare deschis캒.
 * 
 * 
 * 	Factorul de 칥nc캒rcare (Load factor) 洧뤍 = n/m.
 * 		Mai exact: num캒rulDeElemente / Capacitate (sau num캒rul de pozi탵ii).
 * 	Indiferent de modul 칥n care trat캒m coliziunea, avem nevoie s캒 탳tim c칙t de plin e vectorul dinamic
 * al tabelei de dispersie.
 * 	
 * 		칉n cazul rezolv캒rii cu adresare deschis캒 洧뤍 (i.e. factorul de 칥nc캒rcare),
 * poate fi maxim 1, mai exact atunci c칙nd numarulDeElemente (n) este egal cu
 * num캒rul de pozi탵ii (m sau capacitatea vectoruluiDinamic).
 * 		Acest maxim reise din modul 칥n care a탳ez캒m elementele tabelei de dispersie,
 * care 칥n cazul adres캒rii deschise vor fi puse chiar 칥n vectorul dinamic, iar NU
 * 칥n afara sa (NU 칥ntr-o list캒 independent캒).
 * 
 * 
 * 
 * !NB: 칥n cazul adres캒rii deschise avem de efectuat urm캒toarele x3 opera탵ii:
 *			1. calcul캒m pozi탵ia elementului (v. func탵ia de dispersie);
 *			2. dac캒 pozi탵ia este ocupat캒 calcul캒m o alt캒 pozi탵ie, p칙n캒 g캒sim o pozi탵ie liber캒;
 *			3. dac캒 am parcurs toate pozi탵iile 탳i nu am g캒sit niciuna liber캒, 칥nsemn캒 ca (vectorul dinamic)
 *			tabela de dispersie este plin캒 (capacitatea m a ajuns la maxim) 탳i atunci trebuie s캒 o m캒rim.
 */


//b. Prin adresare deschis캒.
public class Tebel캒DeDispersie {
	//Reprezentare. | x3, inclusiv func탵ia de dispersie.

	int capacitate;			//C칙te elemente vom putea p캒stra 칥n tabela de dispersie (care e un VD).
	Nod[] elemente;			//VectorulDinamic 칥n care p캒str캒m referin탵a primului nod, iar dac캒 listele sunt goale null.



	public void creeaz캒() {
		this.capacitate = 11;
		this.elemente = new Nod[this.capacitate];
		//		this.func탵iaDeDisperise(int elementDeAd캒ugat, this.capacitate);
		int i;

		//Ini탵ializ캒m vectorul.
		for(i = 0; i<this.capacitate; i++) {			//Complexitate 풪(m), unde m este capacitatea sau dimensiunea tabelei de dispersie.
			this.elemente[i] = null;
		}
	}

	public int func탵iaDeDisperise(int elementDeAd캒ugat) {
		return (elementDeAd캒ugat%this.capacitate);			//칉mi va returna pozi탵ia la care trebuie ad캒ugat elementul.
	}

	public void adaug캒(int elementDeAd캒ugat) {			//Complexitate 풪(1).
		int pozi탵ieLaCareAd캒ug캒m;
		pozi탵ieLaCareAd캒ug캒m = this.func탵iaDeDisperise(elementDeAd캒ugat);
		Nod nodNou = new Nod();
		nodNou.element = elementDeAd캒ugat;
		nodNou.nodUrm캒tor = null;				//cree캒m un nod nou urm캒tor.

		//Verific캒m dac캒 lista este goal캒 탳i atunci punem nodul nou 칥n vector.
		//Mai exact primul element al vectorului de liste nu va mai fi null, ci referin탵a la nodul nou.
		if(this.elemente[pozi탵ieLaCareAd캒ug캒m] == null) {
			this.elemente[pozi탵ieLaCareAd캒ug캒m] = nodNou;
		}else {			
			nodNou.nodUrm캒tor = this.elemente[pozi탵ieLaCareAd캒ug캒m];
			this.elemente[pozi탵ieLaCareAd캒ug캒m] = nodNou;
		}
	}
	/*	Alftel, dac캒 mai am elemente 칥n list캒, ad캒ug캒m nodul nou la 칥nceputul acesteia.
	 * Prin urmare, va trebui s캒 schimb캒m referin탵ele, respectiv nodul nou ad캒ugat va trebui
	 * s캒 refere (ca nod urm캒tor) la vechiul primul nod, a c캒rui referin탵a exista 칥n vectorul
	 * dinamic, iar apoi schimb캒m referin탵a din vector la nodul nou (care va fi acum primul nod).
	 * 
	 * 	!Aten탵ie: este similar cu o list캒 simpl캒, numai c캒 칥n loc de primulElement, vom avea
	 * this.elemente[pozi탵ieLaCareAd캒ug캒m], aceasta fiind referin탵a la primul nod.
	 */



	public void 탳terge(int elementDe탳ters) {					//Complexitate O(n), cazul defavorabil fiind c칙nd toate elementele tabelei sunt 칥ntr-o singur캒 list캒.
		int pozi탵ieDeUnde탲tergem;								//COmplexitate medie 풪(1).
		pozi탵ieDeUnde탲tergem = this.func탵iaDeDisperise(elementDe탳ters);
		Nod nodCurent = this.elemente[pozi탵ieDeUnde탲tergem];				//Echivalent nodCurent = primulNod.
		Nod nodAnterior = null;
		
		//Verific캒m s캒 nu avem o list캒 vid캒.
		while(nodCurent != null) {
			//Verific캒m dac캒 elementul de 탳ters nu este chiar primul element.
			if(nodCurent.element == elementDe탳ters) {
				if(nodAnterior == null) {
					//Schumb캒m referin탵a pozi탵iei la urm캒torul nod a primului nod (a탳a 탳tergem primul nod).
					this.elemente[pozi탵ieDeUnde탲tergem] = this.elemente[pozi탵ieDeUnde탲tergem].nodUrm캒tor;
				}else {
					nodAnterior.nodUrm캒tor = nodCurent.nodUrm캒tor;
				}
			}else {
				//Altfel parcurgem lista p칙n캒 g캒sim elementul de 탳ters.
				nodAnterior = nodCurent;
				nodCurent = nodCurent.nodUrm캒tor;
			}
		}

	}
	/*NU trebuie parcurs vectorul dinamic, deoarece prin apelarea func탵iei de dispersie vom 
	 * g캒si exact pozi탵ia de unde trebuie 탳ters elementul.	
	 * Cu toate acestea, totu탳i va trebui s캒 parcrugem elementele listei, ca s캒 g캒sim elementul
	 * ce trebuie 탳ters. Din acest motiv, va trebui s캒 implement캒m un nodCurent 탳i un nodAndterior.
	 */
	
	
	public boolean caut캒int (int elementDeC캒utat) {			//Complexitate 풪(n), caz defavorabil 탳i 풪(1) caz mediu.
		int pozi탵ie;
		pozi탵ie = this.func탵iaDeDisperise(elementDeC캒utat);
		Nod nodCurent = this.elemente[pozi탵ie];
		
		boolean exist캒Element = false;
		
		while(nodCurent != null && exist캒Element == false) {
			if(nodCurent.element == elementDeC캒utat) {
				exist캒Element = true;
			}else {
				//Altfel parcurgem lista de elemente.
				nodCurent = nodCurent.nodUrm캒tor;
			}
		}
		return exist캒Element;
	}
	
}
